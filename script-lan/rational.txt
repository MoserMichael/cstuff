

The main design goals for the Pooh programming language are

* Language must serve an educational purpose / be suited for the purpose of introducing kids to 
programming
* Be fun to use. It is very difficult to quantify this or to give a definition for this concept, but we will try. 
* Language must be _somewhat_ dynamically typed; no type must be specified when declaring a 
variable, but we can't do eval or create any bindings other than by declaring that binding explicitly in 
the code. Also variable binding is created either by assignment or by declaration (parameter 
declaration) may not reference a variable that is not defined (like STRICT mode in Perl will be the only 
available option).  
* Variable scope: A variable declared at global scope is global, a variable in a function is of local scope; If 
we want to get value of a global from within a function then we must do something explicit. (GLOBAL[ 
aaa ]  - access global aaa when written in function ) ; We have no closures; as this is another form of 
accessing state from a different scope (also different forms of passing the binding !!!); this is a very 
confusing concept until one gets used to it and is therefore not included.
*So no closures, but functions are still 'first class' - meaning that we have anonymous functions, and 
functions can be returned as return values, etc.
* Encourage data driven programming / it must be possible to declare complex lists / hashes in code;
* Quickest way of debugging should be by means of a built in tracing facility. Here we learn from other 
languages, like in Korn/Bash shells we have set -x; in Chez Scheme there is also a very strong built in 
trace facility.
* Encourage bottom up software construction / exploratory programming;   (That means we need a 
REPL)
* Must have a wide field of application; must be able to serve as a general purpose programming 
language; To be handy we have built in regular expressions  (syntax like perl) or multi line strings 
(syntax like in python).  Also we have array slices in order to return multiple variables from functions.
* The learner must get impression that he is learning / acquiring some tangible knowledge.

.h3  Language must serve an educational purpose / be suited for the purpose of introducing kids to 
programming

This is also a bit vague. Here are some approaches we learned from other programming languages

* Take general purpose language and decide which features / concepts to cut out.  For example we 
can safely cut features designed to facilitate 'programming in the large' - namespaces are cut, 
exception handling is cut. Macro facility / meta-programming features cut. 

* Design special syntax features that disambiguate the language.  For example - in regular 
programming languages assignment (a = b) can mean assignment of value, or assignment of 
reference; this duality makes it difficult to introduce concept of references. I would propose 
assignment of values to be a different operator from assignment of references;  

* They syntax may not force the user to perform anal retentive repetitive tasks over and over again ; 
For example it may not require the user to put in semicolon delimiter between statements - that's an 
evil. 

* The syntax must take the 'there is one way to do a thing' approach; It is not possible to do the PERL 
philosophy of 'there is more than one way to do a thing.

* It must be possible to read the code - meaning that it is essential to be able to understand what a 
line of code does; no 'Under the scene' actions like nested construction/destruction, operator 
overloading, no macros (never), no ruby like auto-generation by constructor stuff. No advanced 
looping construct that does invariant assignment, check and pass to next iteration in one line (like in C).

*Do we need object oriented programming?  Normal people (not conditioned by years of 
programming practice) are no good at growing / maintaining hierarchies
Examples
     People tend to put all their file on the desktop instead of creating hierarchies of folder s.
     Discussion boards: Once upon a time each discussion board had threaded discussions (each item 
had its replies, etc. Nowadays Facebook doesn't have that; it's simpler to manage for most people; I 
think Joel on Software said that first with regards to discussion boards. Once upon a time that was a 
very novel view.
       
