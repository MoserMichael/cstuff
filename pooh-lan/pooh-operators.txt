

Binary operators

/Comparison/
	  TK_OP_NUM_EQ 
	  TK_OP_NUM_NE 
	  TK_OP_NUM_LT 
	  TK_OP_NUM_GT 
	  TK_OP_NUM_LE 
	  TK_OP_NUM_GE 
		
		Both operands must be numbers (either long or double)
		Strings are _not_ automatically converted to numbers;
		Strings, List, Hash or function argument will be ERROR.
		Result type: integer (values zero for false, one for true)

  	  TK_OP_STR_EQ 
	  TK_OP_STR_NE 
	  TK_OP_STR_LT 
	  TK_OP_STR_GT 
	  TK_OP_STR_LE 
	  TK_OP_STR_GE    

		Both operants can be either strings or numbers;
		List, Hash or function argument will be ERROR
		Result type: integer (values zero for false, one for true)


/Addition/
	  TK_OP_NUM_SUBST 
	  TK_OP_NUM_ADD

		Both operands must be numbers (either long or double)
		Strings are _not_ automatically converted to numbers;
		Strings, List, Hash or function argument will be ERROR.
		Result type: if one of the arguments is double then result is double; otherwise long

	  TK_OP_STR_CAT  

		Both operants can be either strings or numbers;
		List, Hash or function argument will be ERROR.
		Result type: string

/Multiplication/
	  TK_OP_NUM_DIV 	
	  TK_OP_NUM_MULT 
	  TK_OP_NUM_MOD

		Both operands must be numbers (either long or double)
		Strings are _not_ automatically converted to numbers;
		Strings, List, Hash or function argument will be ERROR.
		Result type: if one of the arguments is double then result is double; otherwise long
			
Unary operators

- prefix operators
	  TK_OP_NUM_ADD
	  TK_OP_NUM_SUB

		operand must be number (either long or double)
		Strings is _not_ automatically converted to numbers;
		Strings, List, Hash or function argument will be ERROR.
		Result type: if one of the arguments is double then result is double; otherwise long


Assignment operator:
    Multivalue assignment (left hand side is a list)
	Error If right hand side is known to be any value other than list 

    Single value assignmen
	Left hand side is collection ref
	    Currently do not check values in collections, so can be any value.
	Left hand side is scalar
	    Type of left hand side has to be equal to type of right hand side;
	    (With exception of integer->long, integer,long->string conversion
	    which is done explicitly)

For loop
    Right side evaluates to List
	The loop is over all elements of the list, so 
	->Left side is a single scalar ; 
    Left side evaluates to a Hash table
	The loop is over all name, value pairs of the hash table; so
	->Left hand side as scalar will be a list (multi value assignment will set name value pair)
	  Left hand side can be list constructor.


