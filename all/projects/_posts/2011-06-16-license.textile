---
layout: post
title:  The license of this stuff / Why use C ?
---

h2. {{ page.title }}
<p class="publish_date">17 July 2011</p>

.. is the " 3-clause BSD also known as the New BSD License":http://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22New_BSD_License.22_or_.22Modified_BSD_License.22.29
Which gives you license to do as you please with this stuff, except that you may not sue me for any damage and you have to credit me for using stuff.

h3. Why C

These projects are mostly written in C with classes / Abstract data types. Here are my reasons to prefer C over C++ or Java.
Higher order languages like C++ and Java have a much more expressive syntax.  Now with these capabilities comes an abundance of stylistic choices that divert attention from the real goal of writing a program.

* With C++ one has to make a set of decisions; is it wise to use C++ exceptions / RTTI or not? Will one use the STL library? What about BOOST, or rather which subset of BOOST? What is your position on template metaprogramming (I strongly dislike this kind of abuse) ?  All these choices are normally codified into a style guide, for example the "Google C++ style guide":http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml is a very thorough document and I largely agree with what it says; however all these decision points taken together tend to restrict you with regards to third party libraries and tools that you can interact with; so they in fact restrict your freedom of choice.
* In Java you have much less choice in terms of styles and programming paradigms; one should generally stick with how the JDK does it. However with Java you have an abundance of framework for any occasion; Choice of adopted framework has a strong lock in affect (will you use SPRING or OSGI or whatever kind of Beans? Which subset of the "Jakarta":http://jakarta.apache.org/ alphabet soup is in use?  All these choices usually come with a lot of internal politics, programmers tend to invest and band around technological choices.
* With C++ and Java it is very easy to declare classes; now there are infinite ways how one can possible decompose a system into classes; and you can spend an infinite amount of time on that issue alone; All this of course distracts from the task of writing the actual program. With C with classes one is generally limited to object aggregation and polymorphism; interestingly the "Design pattern book": advocates preference of object aggregation over inheritance. So somehow less choice sometimes results in more freedom.
* Interesting point is that in recent years there is stated a trend away from OO design processes towards Test driven / Agile methodologies;
* Also "Linus Thorvalds says":http://www.realworldtech.com/forums/index.cfm?action=detail&id=110618&threadid=110549&roomid=2 that with C one usually does not have to wonder what a line of code does; as opposed to higher language features that are of course expressive, but of course they are supposed to 'hide complexity' so go figure what the thing does.
* An obligatory reference to the "C+ FQA":http://yosefk.com/c++fqa/  is hereby made.

The point is that I still do C++ and Java for paid work, as best as I can; but all the fluff and politics around is well, really no fun. Also please note that most programs in my universe that matter are written in C, the Linux kernel, the gcc toolchain, most scripting languages - all in C.
