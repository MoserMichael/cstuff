---
layout: post
title:  Encryption utility with openssl
---

h2. {{ page.title }}
<p class="publish_date">24 February 2014</p>

h3. Wholesale encryption with RSA 

The following schema is used when large data set are encrypted/decrypted.

# An initial message exchange is performed using public/private encryption "key pairs":http://en.wikipedia.org/wiki/Public-key_cryptography , note that public and private keys are different. The sending party uses the public key for encryption, while the receiving party is using the private key for decryption; this exchange is very slow. This exchange is secure if no third party is able to guess the private key - the encryption algorithm (such as "RSA":http://en.wikipedia.org/wiki/RSA_(algorithm) ) ensures this much, trust the maths.

# The sending party generates a symmetric key for encryption and decryption of subsequent data; decryption and encryption of this data is relatively fast, but here the same key is used to both encrypt and to decrypt the data. Security is based on the assumption that no other third party is able to guess this symmetric key. 

# The sending party is encrypting all further data with the symmetric key; sometimes they swap the symmetric key. Note that the symmetric key is sent by means of the initial message exchange, that means it is encrypted with the public key of the sending party - so the trust that we put into the initial message exchange is the basis for the trust that we place in the security of all further communications. 

# This two-step schema is used in "SSL/TLS":http://en.wikipedia.org/wiki/Transport_Layer_Security , "PGP":http://en.wikipedia.org/wiki/Pretty_Good_Privacy , probably all encryption methods are using this in some way.

The catch is that the whole schema depends on the way that the symmetric key is picked, normally a random number generator is supposed to do this; Security is compromised if a third party can guess the random numbers that were picked; Many attacks on privacy are based on manipulating the way that random numbers are chosen on the computer of the sending party;
A somewhat more secure approach would be to encrypt the whole message with public key, and to decrypt it by using the public key - without having access to the private key it is currently impossible to decrypt the message (provided that the keys are sufficiently 'strong' - the longer the key, the stronger it is and the harder it is to break by guessing the right combination - one has to try more combinations to be lucky)
The secret of the private key is generated only once, and everything is secure if the computer was not compromised at the time that they key was created.

The problem with this approach is that this takes a lot of time to decrypt the message and slightly less time to encrypt the message; however modern computers have an increasing number of processors. This little project explores how multi processing can help to speed up the encryption and decryption of larger messages.

Another thing is that while it is currently practically impossible to break RSA encryption with reasonably strong key, theoretically this might change once they have a working quantum computer; However there are serious doubts that we are anywhere near the development of such a breakthrough, but things might change, you never know.

Also please note that RSA encryption is choose for this utility because there are "serious doubts":http://www.theguardian.com/world/2013/sep/05/nsa-how-to-remain-secure-surveillance in the validity of ecliptic cryptography (given all those recent revelations)

h3. The tools used in this study and how to use them

For this study command line programs were written that encrypts/sign and decrypt/verify longer data all with a public/private key pair.

First of all the openssl utility is used to create the key pair; the next command creates the super secret private key - with 4096 bits long. Remember that the longer the key, the harder it is to break, 4096 bits is very secure by any standards (of today).

<pre>
  openssl genrsa 4096 >private.pem
</pre>

(if on Linux: before doing this move around the mouse in random patterns and type some gibberish on the keyboard; the mouse driver and keyboard driver are some of the sources of entropy used to seed the random number generator used to compute the keys "here":http://en.wikipedia.org/wiki/Entropy_(computing)#Linux_kernel )

Given this file we extract the public key. the sender of the message must have it.

<pre>
  openssl rsa -in private.pem -out public.pem -pubout
</pre>

The message is encrypted and signed with the following command, in this example the file raw_message is encrypted by mean of the public key public.pem, resulting in encrypted file encrypted_file.file . Note that this program splits up the work so that it can be done in parallel. 

<pre>
  rsaencmt -k public.pem -i raw_message.file -o encrypted_file.file 
</pre>

The encrypted message is later decrypted and verified with the following example,
Note that this program splits up the work so that it can be done in parallel. 

<pre>
  rsadecmt -k private.pem -i encrypted_file.file -o decrypted_file.file
</pre>

Also two programs where written that do all the work serially (not in parallell). these are not very practial, they only exist as a baseline in order to compare the times.

<pre>
  rsaenc -k public.pem -i raw_message.file -o encrypted_file.file 
  rsadec -k private.pem -i encrypted_file.file -o decrypted_file.file
</pre>
                                        
h3. how to download the sources & build the tools 

Sources can be downloaded as "zip archive":https://github.com/MoserMichael/cstuff/zipball/master
or downloaded by the git program.

<pre>
	git clone https://github.com/MoserMichael/cstuff.git
</pre>

The project can be build on Linux (checked 32 or 64 bit Intel/Amd) or on Windows with Cygwin. 
In order to build the program, we need the presence of an internet connection, so that the build procedure can download the openssl libraries (alternatively you can place the openssl tar ball into directory cstuff/rsautl/openssl

Build and install into /usr/local/ directory
	
<pre>
	cd build
	./build-rsautl.sh install
</pre>

Build and install into /usr/alt directory

<pre>
	cd build
`	./build-rsautl.sh install INSTALL_PREFIX=/usr/alt
</pre>


h3. How it works & file formats

h4. Task of the encryption program 

* A header is put before the input message, The header is of the following form
** 4 bytes - magic constant (0xABCDEF)
** 4 bytes - file version  (currently 0x1)
** 4 bytes - length of input data
* The input message is divided into smaller blocks, each block is equal to the size of the public key, minus length of cryptographic padding.
* The each block is RSA encrypted with the public key, while using the PKCS1_OAEP cryptographic padding
* a SHA256 digest is computer over all encrypted output, this digest is used to verify that the encrypted message has not been altered in transition
* the digest itself is encrypted with the public key 

h4. Task of the decryption program 

* The first block is decrypted with the private key
** verify the file header; if magic constant and file version do not make sense, then this means that the message was encrypted with a non matching public key.
** check that the length of the file is consistent with the length field of the file header.
* Break up the input message into chunks equal to the length of the private key; compute the SHA256 digest over the encrypted data (prior to decrypting)
* Decrypt each data chunk using the private key, while using the PKCAS1_OAEP cryptographic padding
* when finished with the data: compare the value of the SHA256 digest with the stored value; if it is not equal then fail (show error message)
* Strip the header from the decrypted message

h3. More internals

The program uses the "openssl library":http://www.openssl.org/ for cryptography. The openssl tarball includes instructions on working with multiple threads (File doc\crypto\threads.pod and directory crypto\threads have a sample)
Basically the program needs to install an optional callback function that implements locking for sensitive data structures.

The *rsaencmt* and *rsadecmt* programs are doing their task in parallel; In order to do so they spawn a number of thread - their number is equal to the number of processor cores on the system  times 2.
The factor of two is chosen due to hyperthreading - usually a core has two hardware threads, if a given core is stalled then the second thread has the chance to do something useful. Currently I do not set the processor affinity of each thread, as I understand the CPU scheduler of the operating system does its own tricks, and tuning of CPU affinity can be tricky undertaking.
The "tpool thread pool":http://mosermichael.github.io/cstuff/docs/html/tutils/a00014.html is used to dispatch requests to a thread pool with fixed number of threads.

At first the multithreaded program did not perform very much faster than the serial program; as it turns out this was due to locks used by the openssl library.
However with the openssl library it is relatively easy to fix problems related to locking, a callback function for locking must be implemented and registered by means of the "CRYPTO_set_locking_callback":http://www.openssl.org/docs/crypto/threads.html function.
It turns out that each time that there were multiple locks when calling  "RSA_public_encrypt":https://www.openssl.org/docs/crypto/RSA_public_encrypt.html and "RSA_private_decrypt":https://www.openssl.org/docs/crypto/RSA_public_encrypt.html
Turns out that the library performs a trick called "Montgomery reduction":http://en.wikipedia.org/wiki/Montgomery_reduction  ("this function":https://www.openssl.org/docs/crypto/BN_mod_mul_montgomery.html )
intermedeate values have to be cached somewhere - the openssl library uses the RSA key object for that, now in order to make this library usable with multithreading, every access to these cached values must be locked !
The solution was to 
* Disable this particular lock while building openssl for this project
* for each thread create a copy off the RSA key object.

However there is no good fix for "RSA_public_encrypt":https://www.openssl.org/docs/crypto/RSA_public_encrypt.html . Remember that "cryptographic padding":http://en.wikipedia.org/wiki/Padding_(cryptography) is used for each block,
the library must create random numbers for each encrypted block, in to do so it must it uses the single instance of the "SSLeay random number generator":http://www.cypherpunks.to/~peter/06_random.pdf , this is a cryptographically secure random number generator ("more here":http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator )
I can't create a random number generator per thread because that could deplete the entropy pool and seeding of the generator may block for some time !)

Therefore multithreaded encryption is often not very much faster than single threaded encryption, but the speedup for decryption (where it counts) is considerable.


h3. Results

The test encrypts and decrypts a 100kb file with keys of various length; here are the results

h4. Laptop, one processor with eight cores | (intel Core i7-2720QM - 2.20 GHZ); | on Windows under Cygwin - program is 32 bit 

Key length: 2048 bits
<notextile>
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.154</td>
	<td>3.463</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.116</td>
	<td>0.850</td>
     </tr>
  </table>
</notextile>

Key length: 4096 bits
<notextile>
  <table>
     <tr>
	<th>Mode</th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.347 sec</td>
	<td>11.905 sec</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.287 sec</td>
	<td>3.0222 sec</td>
     </tr>
  </table>
</notextile>

h4. Eight cores (two cpu's) | Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz | (Linux on x86_64)

Key length: 2048 bits
<notextile>                                    	
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.038</td>
	<td>0.898</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.013</td>
	<td>0.115</td>
     </tr>
  </table>
</notextile>

Key length: 4096 bits
<notextile>
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.053</td>
	<td>2.936</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.017</td>
	<td>0.382</td>
     </tr>
  </table>
</notextile>

h4. 24 cores (2 cpus) | Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz | (Linux on x86_64)

Key length: 2048 bits
<notextile>
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.042</td>
	<td>0.790</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.023</td>
	<td>0.087</td>
     </tr>
  </table>
</notextile>

Key length: 4096 bits
<notextile>
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.057</td>
	<td>2.527</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.024</td>
	<td>0.223</td>
     </tr>
  </table>
</notextile>

h4. On VMWare virtual machine that utilizes two core (Linux on i686) 

Key length: 2048 bits
<notextile>
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td>0.931</td>
	<td>53.61</td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td>0.897</td>
	<td>29.773</td>
     </tr>
  </table>
</notextile>

Key length: 4096 bits
<notextile>
  <table>
     <tr>
	<th></th>
	<th>Encryption</th>
	<th>Decryption</th
     </tr>
     <tr>
	<td>Single thread</td>
	<td></td>
	<td></td>
     </tr>
     <tr>
	<td>Multithreaded</td>
	<td></td>
	<td></td>
     </tr>
  </table>
</notextile>

h4. Summary of results / more internals
Results are consistent with predictions.
Now I could have achieved a greater speedup if I were to use the GPU of the graphics card, but this a bit too complex for an evening of work.

h4. Epilogue

Looking at the details of cryptography one can see to what extent technology did progress since the end of World War II.
The "Enigma":http://en.wikipedia.org/wiki/Enigma_machine and "Lorenz":http://en.wikipedia.org/wiki/Lorenz_cipher machine used electrio-mechanical tricks, several hundreds of moving parts, all very similar to a typewriter that my father used when I was a kid.
Now compare this complexity to the number of circuits in a modern computer. Amazing, Science fiction !

...  and the only way to break it is by cheating with the random number generator, by means of "side channel attacks":http://en.wikipedia.org/wiki/Side_channel_attack ; or by building the mythical beast - the quantum computer.

