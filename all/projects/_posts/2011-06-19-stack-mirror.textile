---
layout: post
title: StackMirror tool for fixing stack problems
---

h2. {{ page.title }}
<p class="publish_date">19 July 2011</p>

Debugging stack smashers is hard. Usually you have to solve these bugs with logs + divide and conquer. Even "valgrind":http://valgrind.org/ can't help here ! 
GCC has the compiler options  -fstack-protector-all , but it does not give accurate stack traces, it is more designed to shut down an application so as to avoid remote exploit of a buffer overflow error.

So a new open source tool is presented here that can help with most such cases; StackMirror to the rescue! It detects stack smashers and reports an accurate stack trace of the function that caused it.

First of all how to use it
- The tool works with gcc  (versions or upward)
- The application must be re compiled with gcc compiler option -finstrument-functions
- During runtime the application has to load stack.so library, so either LD_PRELOAD environment has to be set to the shared library, or application has to link with it.
- Application should not be compiled with Optimization (-O1 -O2 -O3 ) and frame pointer omission (Please use both -fno-omit-frame-pointer and -On in order to prevent frame pointer omission).
- I have tested the tool on both i686 and x86_64; please look if it works on other platforms too.

h3. Download instructions

Get "my stuff":https://github.com/MoserMichael/cstuff 
       chdir stack
       make
       make install
the preceeding line will install to /usr/local
       make install INSTALL_PREFIX=/opt/stack
will install stuff to prefix /opt/stack

h3. Step by step usage instruction

Prior to running your program, please set the following environment variable
       export LD_PRELOAD=/usr/local/lib/libstack.so	
Please note that value of LD_PRELOAD must be the full path name of libstack.so

Run you program, if it smashes the stack and we are ok then an error message of the following form is displayed. Don't worry, it will be formatted in the next step.
<pre>
ERROR: Stack corruption detected
**** start stack ***
frame 0 ip: 0x80484e4
frame 0 ip: 0x80485c3
frame 1 ip: 0x804856f
frame 1 ip: 0x80485e7
frame 2 ip: 0x804856f
frame 2 ip: 0x80485e7
frame 3 ip: 0x804856f
frame 3 ip: 0x80485e7
frame 4 ip: 0x804856f
frame 4 ip: 0x80485e7
frame 5 ip: 0x804856f
frame 5 ip: 0x80485e7
frame 6 ip: 0x804856f
frame 6 ip: 0x80485e7
frame 7 ip: 0x804856f
frame 7 ip: 0x80485e7
frame 8 ip: 0x804856f
frame 8 ip: 0x80485e7
frame 9 ip: 0x804856f
frame 9 ip: 0x80485e7
frame 10 ip: 0x804856f
frame 10 ip: 0x804864e
frame 11 ip: 0x8048627
frame 11 ip: 0x80486c7
frame 12 ip: 0x8048670
frame 12 ip: 0x40049e37

08048000-08049000 00000000 /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
40000000-4001c000 00000000 /lib/i386-linux-gnu/ld-2.13.so
4001e000-4001f000 00000000 [vdso]
40021000-40023000 00000000 /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/lib/libstack.so
40033000-4018d000 00000000 /lib/i386-linux-gnu/libc-2.13.so
*** eof stack ***
</pre>
Save this error message to a file crash.log and run 
       /usr/local/bin/readerrors.pl crash.log
It should you an message as follows:
<pre>
-----------------------------
ERROR: Stack corruption detected
-----------------------------
ip 0x80484e4 from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
crash_me
test.c:10

ip 0x80485c3 from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:36

ip 0x804856f from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:30

ip 0x80485e7 from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:38

ip 0x804856f from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:30

ip 0x80485e7 from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:38

ip 0x804856f from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:30

ip 0x80485e7 from /home/mmoser/archive/cstuff/GNU-Linux-2.6.38-8-generic-i686/test/tst
fact
test.c:38
</pre>
h3. How does it work?
Compiler option -finstrument-function is usually used for building profilers; for each function the compiler inserts two function calls; on entering the function it calls __cyg_profile_func_enter on leaving the function it calls __cyg_profile_func_exit  .
The tool implements these two functions; on entering an application function the tool records the function return address, and when it is time to leave this function it checks if that address has been modified; if that is the case then we know that the stack was smashed here right by this function. 
As a side effect we maintain a copy of current thread stack for application functions (hence the name StackMirror) ; thread local storage pointer points to a stack data structure allocated on heap memory; each entry stores the return address and base pointer address, on function exit the content of base pointer address is checked.
When an error occurs, the stack frames are printed to standard output + addresses of the text segment of shared libraries + executable modules is printed to standard error.
This log is then processed after the crash and resolved to function names + line numbers. There are also custom versions that either dump core or invoke a debugger when an error occurs.

