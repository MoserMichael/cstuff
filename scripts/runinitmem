#!/usr/bin/perl

use strict;
use Cwd;
use Cwd 'realpath';

sub get_script_path
{
  my $cmd = `cat /proc/$$/cmdline`;
  my @tok = split("\0", $cmd);

  return realpath($tok[1]);
}

sub get_install_dir
{
  my $PRG;


  $PRG=get_script_path();
 
  $PRG=`dirname $PRG`;
  chomp($PRG);

  $PRG=`dirname $PRG`;
  chomp($PRG);

  return $PRG;
}

sub get_lib_path
{
   my ($os_type,$os_version,$arch);

   $os_type=`uname -o | sed -e 's#/#-#g' -e 's#(#-#g' -e 's#)#-#g'`;
   chomp($os_type);

   $os_version=`uname -r | sed -e 's#/#-#g' -e 's#(#-#g' -e 's#)#-#g'`;
   chomp($os_version);

   $arch=`uname -m`;
   chomp($arch);

   return get_install_dir()."/${os_type}-${os_version}-${arch}/lib";
}

sub get_lib_path
{
   my ($os_type,$os_version,$arch);

   $os_type=`uname -o | sed -e 's#/#-#g' -e 's#(#-#g' -e 's#)#-#g'`;
   chomp($os_type);

   $os_version=`uname -r | sed -e 's#/#-#g' -e 's#(#-#g' -e 's#)#-#g'`;
   chomp($os_version);

   $arch=`uname -m`;
   chomp($arch);

   return get_install_dir()."/${os_type}-${os_version}-${arch}/lib";
}


sub run
{
  my ($exe,$is_cpp,@pathcomp,$sname,$opt);

  $exe = $ARGV[0];
  if (! -e $exe) {
    $exe = `which $exe`;
    chomp($exe);
    if ($exe eq "") {
	print "INITMEM: executable $exe not found in the current path\n";
	exit(1);
    }
  }

  # script name
  @pathcomp = split('/', $0);
  $sname = $pathcomp[ scalar(@pathcomp) - 1 ];

  $opt = "";
  if ($sname eq "runinitmeme"){
    $opt = "e";
  }

  # check if program uses c++
  $is_cpp=`ldd $exe | grep stdc++ | wc -l`;
  chomp($is_cpp);

  if ($is_cpp) {
    $is_cpp="cpp";
  } else {
    $is_cpp="";
  }


  # make library path.
  my $LIBPATH=get_lib_path();
  my $lib = "${LIBPATH}/libinitmem${opt}${is_cpp}.so";
  my $prev = $ENV{'LD_PRELOAD'};
  $ENV{'LD_PRELOAD'}="$lib:$prev";

  die $lib;
  
  exec(@ARGV) || print "INITMEM: failed to start debugee. errno $!\n";
  exit(1);
}

sub usage
{
  print <<EOF
Usage:
runinitmem <cmdline>
runinitmeme <cmdline>

Runs command line while initmem is enabled; 

inititmem hooks glibc memory allocation functions; newly allocated
memory is initialised with 0xDD memory about to be freed is set to 0xEE value.

runinitmem - for newly allocated memory all usable memory is set 
	     Note that usable memory may be larger than what was requested.
runinitmeme - only memory requested by the user is set 

Tool may be used during testing and debugging; allows to test an
executable without changing the source.
  
Hooked glibc functions are:
    malloc
    realloc
    posix_memalign
    memalign
    valloc
    free

If executable depends on std++ then additionally it hooks
   operator new
   operator new[]
   operator delete
   operator delete[]

Warning:

You can get similar functionality if you are ready to change source code + recompile;
glibc mallopt can be called with M_PERTURB options; if set then newly allocated and about to be freed memory is set to the same byte value; also the glibc features used malloc hooks, these have their own problems.

However i think it is useful to set allocated and freed memory to different
values; so it is easier to spot if you have uninitialised or freed memory.

Bugs:

Realloc may have to move the argument pointer - free the old pointer and allocate a new one;
here the freed memory is not overwritten; can't access memory after it has been freed;
it may have been already reused.

Note: the debugged process will set core to unlimited, so that if it crashes you will not miss the core file.

EOF
;
  exit(1);
}

if (scalar(@ARGV) == 0)
{
    usage();
}

run();
