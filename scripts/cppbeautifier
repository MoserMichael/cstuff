#!/usr/bin/perl

use strict;

my ($in_file,$out_file,$dir_name);
my (%FILE_CACHE,@FILES_USED,$FILE_CACHE_LIMIT);
my ($cur_src_file, $cur_src_line, $cur_file);

$FILE_CACHE_LIMIT = 100;

my %options;

sgetopt( [ 'h', 'i:', 'd', 'o:' ], \%options);

if ($options{'h'}) {
  print_help();
}


print_help( "Missing -i option") if (! defined $options{'i'} );
print_help( "Missing -o option") if (! defined $options{'o'} );

$in_file = $options{'i'};
$out_file = $options{'o'};
$dir_name = $options{'d'};

process_cpp_file($in_file,$out_file,$dir_name);

sub print_help
{
  my $msg = shift;

  if (defined $msg) {
print "ERROR: $msg\n\n";
}

  print <<EOF
Usage:
    cppbeautifier -i <cpp_file> [-d <directory>] -o <report_file>

Description
    Takes an output file produced by the c processor and anotatets it, so that it will be readable by humans.
 
    For each line of preprocessor output we find the corresponding file from the source file; if these
    are different then both source and preprocessor line are displayed, this way it it is easier for
    the programmer to determine the result of the macro expansion.

    Lines from the source file have prefix <filename>:<line number>:+ and lines from preprocessor
    output have prefix <filename>:<line number>:-

    The preprocessor output format is described here:    
    http://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html 

    Please note that the preprocessor often includes reference to source files with their relative path,
    so you should either use this program from the same current directory where you have run the preprocessor / compiler.
    Alternatively set the -d option to this directory.
EOF
;
  exit(1);
}

sub process_cpp_file
{
  my ($pfile,$ofile,$dname);
  $pfile = shift;
  $ofile = shift;
  $dname = shift;

  if (defined $dname) {
    chdir($dname);
  }

  my ( @tok, $line, $src_file, $line_num, $add_file_info, $src_line );

  open(INFILE,$pfile) || die "Can't open $pfile";
  open(OUTFILE,">$ofile") || die "Can't open $ofile for writing";
  while(<INFILE>) {
  
    my $line = $_;

    if (substr($_,0,2) eq "# ") {
       @tok = split(" ",$line);

       $line_num = $tok[1];
       $src_file = extract_fname( $tok[2] );

       $add_file_info = scalar( stat($src_file) );

       if ($add_file_info) {
	 set_src_file( $src_file );      
       }
       print OUTFILE $line;
       next;
    }
    
    $src_line = get_src_file_line( $line_num );
    if (defined ( $src_line ) && $src_line ne $line ) {  #  

       print OUTFILE "$src_file:$line_num:+:$src_line";
    }
    print OUTFILE "$src_file:$line_num:-:$line";
    $line_num ++;
  }
  close(INFILE);
  close(OUTFILE);
}


sub set_src_file
{
  my $fname = shift;
  my ($entry,$fn, $fd);

  if (defined $cur_src_file) {
     $entry = $FILE_CACHE{ $cur_src_file };
     if (defined $entry) {
       ${ $entry } [1] = $cur_src_line;
     }
  }

  if (exists $FILE_CACHE{ $fname }) {
     $entry = $FILE_CACHE{ $fname };
     $cur_src_file =  @{ $entry } [0];
     $cur_src_line =  @{ $entry } [1];
     $cur_file =      @{ $entry } [2];
  }

  if (scalar( @FILES_USED ) == $FILE_CACHE_LIMIT) {
     my $fn = shift(@FILES_USED);
     $entry = $FILE_CACHE{ $fn };
     close( ${ $entry } [ 2 ] );

     delete $FILE_CACHE{ $fn };
  }

  open $fd, $fname ||  die "...$!";
  $FILE_CACHE{ $fname } = [ $fname, 1, $fd ];

  $cur_src_file = $fname;
  $cur_src_line = 1;
  $cur_file = $fd;

  push( @FILES_USED, $fname );
}

sub get_src_file_line
{
  my $ln = shift; 

  if ($cur_src_line > $ln) {
    seek($cur_file,0,0);
    $cur_src_line = 1;
  }
  for(;$cur_src_line < $ln; $cur_src_line++) {
    readline($cur_file);
  }

  $cur_src_line++;
  return readline($cur_file);

}

sub extract_fname
{
  my $fname = shift;
  if (substr($fname,0,1) eq '"') {
    return substr($fname,1,length($fname)-2);
  }
  return $fname;
}

# ----------------------------------------------------------------------------
sub sgetopt
{
   my $opts = shift;
   my $resref = shift;
   my ($i,$argval,$optval,$has_value);

   for($i=0; $i < scalar(@ARGV) ;  ) {
      $argval = $ARGV[ $i++ ];
      next if (! substr($argval,0,1) eq "-" && length($argval) == 2);
      $argval = substr($argval,1);
      $has_value = 0;
      foreach $optval (@{ $opts }) {
	   if ($argval eq substr($optval,0,1)) {
	      $has_value = 1;
	      if (index($optval,':') != -1) {
		 if ($i >=  scalar(@ARGV)) {
	           print "ERROR: option -$argval must have a value\n";
		   exit(1);
		 }
		 $has_value = 1;
	         ${ $resref } { $argval } = $ARGV[ $i ++ ];
	      } else {
                 ${ $resref } { $argval } = 1;
	      }
	   }
       }
       if (! $has_value) {
	 print "ERROR: Command line option -$argval is not defined\n";
	 exit(1);
       }
   }
}

